Spliterator: special object of which a stream is built

default Stream<E> stream() {
    return StreamSupport.stream(spliterator(), false);
}

default Spliterator<E> spliterator() {
    return Spliterators.spliterator(this, 0);
}

iterator of the collection

ArrayList:

public Spliterator<E> spliterator() {
    return new ArrayListSpliterator<>(this, 0, -1, 0);
}

HashSet:

public Spliterator<E> spliterator() {
    return new HashMap.KeySpliterator<E, Object>(map, 0, -1, 0, 0);
}

Stream divided
 1. into object to access the data (can be overridden)
 2. ReferencedPipeline, used to handle processing the data (don't override)

We can build our own Spliterator

public interface Spliterator<T> Spliterator {

    boolean tryAdvance(Consumer<? super T> action);
    Spliterator<T> trySplit();
    long estimateSize();
    int characteristics();
}

